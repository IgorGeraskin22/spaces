# -*- coding: utf-8 -*-
import sys

import mastermind_engine
from mastermind_engine import counting_bulls_cows


# import num as num
# from mastermind_engine import cow_bull


# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

#  Основной код игры должен быть реализован в этом модуле.
#  В mastermind_engine должны быть только функции загадывания числа и подсчёта быков и коров.


def new_game():
    """Функция предложение сыграть еще партию, если пользователь выиграл."""
    while True:
        print('Хотите еще партию? Да/Нет')
        new_input = input()
        if new_input == 'Да' or new_input == 'да' or new_input == 'ДА':
            print('Новая игра')
            machine_guessed_number()

        if new_input == 'Нет' or new_input == 'нет' or new_input == 'НЕТ':
            print('Игра закончена')
            sys.exit()

        else:
            print("Ошибка ввода! Введите только Да или Нет")
            continue


def machine_guessed_number():
    """Функция загадывания числа"""
    setting_n = mastermind_engine.setting_number()
    guessing_number(setting_n)


def guessing_number(setting_n):
    """Функция отгадывания числа"""
    print('Число которое загадал компьютер', setting_n)  # Для теста
    count = 0
    while True:
        count += 1
        print(str(count), " попытка")

        num_dig = input("Введите 4  неповторяющиеся числа: ")
        if len(set(num_dig)) != 4 or not num_dig.isdigit():
            print('Ошибка ввода! Введите 4  неповторяющиеся числа')
            continue
        else:
            num_digits = [int(i) for i in str(num_dig)]

        if num_digits != setting_n:
            counting_bull_cow = counting_bulls_cows(num_digits, setting_n)
            print('Быков', counting_bull_cow[0], 'Коров', counting_bull_cow[1])
            print('Продолжайте угадывать')
            continue

        else:
            print("Ты выиграл.")
            print("За ", str(count), " ходов.")
            new_game()

        return num_digits, setting_n


def take_bulls_cows(x):
    print('Быков', x[0], 'Коров', x[1])
    print('Продолжайте угадывать.')
    guessing_number(mastermind_engine.setting_number)


machine_guessed_number()

# Зачёт!
